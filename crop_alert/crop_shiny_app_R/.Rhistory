mx.df = cbind(mx.df, dates = as.character(dates), states = states)
mx.df = mx.df %>%
gather(pathogen_list, pathogen_reported, 1:146, na.rm = TRUE) %>%
select(dates, states, pathogen_reported) %>% arrange(desc(dates))
# adding coordinates to the df
states_names <- dplyr::map_data("state")
# get avg of the coordinate for each state, since we want to draw a dot on them
states_av <- states_names %>% group_by(region) %>% summarise(avg_long = mean(long), avg_lat = mean(lat))
# change the format
states_av$region = str_to_title(states_av$region)
mx.df.cor = merge.data.frame(mx.df, states_av, by = states)
return(mx.df)
}
mx = retrieve.twitter.term(tw_df, "Corn_diseases.lst")
retrieve.twitter.term <- function(twitterDF, diseaseDB){
# load disease list and reformat
pathogen_df = read.delim(diseaseDB, header = FALSE, col.names = "common_names")
pathogen = pathogen_df %>%
mutate(patho_names = str_replace(common_names, " or ", "|")) %>%
mutate(patho_names2 = str_replace(patho_names, " \\(and ", "|")) %>%
mutate(patho_names3 = str_replace(patho_names2, " \\(", "|")) %>%
mutate(patho_names4 = str_replace(patho_names3, "\\)", "")) %>%
mutate(patho_names5 = str_replace(patho_names4, " and ", " ")) %>%
mutate(patho_names6 = str_replace(patho_names5, "'s", "")) %>% .[-c(109:142),] %>%
select(patho_names6)
# tweets text
tw = twitterDF$clean_text
path_names = pathogen$patho_names6
# tweet date and states
dates = as.Date(twitterDF$created)
states = twitterDF$states
# create a matrix
mx = matrix(nrow = length(dates), ncol = length(pathogen$patho_names6), byrow = TRUE)
for( i in 1:length(tw)){
for( j in 1:length(path_names)){
if(score(tw[i], path_names[j]) >= 19){
mx[i, j] = path_names[j]
}
}
}
dimnames(mx) <- list(as.character(dates), path_names)
mx.df = data.frame(mx)
mx.df = cbind(mx.df, dates = as.character(dates), states = states)
mx.df = mx.df %>%
gather(pathogen_list, pathogen_reported, 1:146, na.rm = TRUE) %>%
select(dates, states, pathogen_reported) %>% arrange(desc(dates))
# adding coordinates to the df
states_names <- ggplot2::map_data("state")
# get avg of the coordinate for each state, since we want to draw a dot on them
states_av <- states_names %>% group_by(region) %>% summarise(avg_long = mean(long), avg_lat = mean(lat))
# change the format
states_av$region = str_to_title(states_av$region)
mx.df.cor = merge.data.frame(mx.df, states_av, by = states)
return(mx.df)
}
mx = retrieve.twitter.term(tw_df, "Corn_diseases.lst")
retrieve.twitter.term <- function(twitterDF, diseaseDB){
# load disease list and reformat
pathogen_df = read.delim(diseaseDB, header = FALSE, col.names = "common_names")
pathogen = pathogen_df %>%
mutate(patho_names = str_replace(common_names, " or ", "|")) %>%
mutate(patho_names2 = str_replace(patho_names, " \\(and ", "|")) %>%
mutate(patho_names3 = str_replace(patho_names2, " \\(", "|")) %>%
mutate(patho_names4 = str_replace(patho_names3, "\\)", "")) %>%
mutate(patho_names5 = str_replace(patho_names4, " and ", " ")) %>%
mutate(patho_names6 = str_replace(patho_names5, "'s", "")) %>% .[-c(109:142),] %>%
select(patho_names6)
# tweets text
tw = twitterDF$clean_text
path_names = pathogen$patho_names6
# tweet date and states
dates = as.Date(twitterDF$created)
states = twitterDF$states
# create a matrix
mx = matrix(nrow = length(dates), ncol = length(pathogen$patho_names6), byrow = TRUE)
for( i in 1:length(tw)){
for( j in 1:length(path_names)){
if(score(tw[i], path_names[j]) >= 19){
mx[i, j] = path_names[j]
}
}
}
dimnames(mx) <- list(as.character(dates), path_names)
mx.df = data.frame(mx)
mx.df = cbind(mx.df, dates = as.character(dates), states = states)
mx.df = mx.df %>%
gather(pathogen_list, pathogen_reported, 1:146, na.rm = TRUE) %>%
select(dates, states, pathogen_reported) %>% arrange(desc(dates))
# adding coordinates to the df
states_names <- ggplot2::map_data("state")
# get avg of the coordinate for each state, since we want to draw a dot on them
states_av <- states_names %>% group_by(region) %>% summarise(avg_long = mean(long), avg_lat = mean(lat))
# change the format
states_av$region = str_to_title(states_av$region)
colnames(states_av)[1] = "states"
mx.df.cor = merge.data.frame(mx.df, states_av, by = states)
return(mx.df)
}
mx = retrieve.twitter.term(tw_df, "Corn_diseases.lst")
colnames(states_av)[1]
colnames(states_av)[1] = "states"
colnames(states_av)
retrieve.twitter.term <- function(twitterDF, diseaseDB){
# load disease list and reformat
pathogen_df = read.delim(diseaseDB, header = FALSE, col.names = "common_names")
pathogen = pathogen_df %>%
mutate(patho_names = str_replace(common_names, " or ", "|")) %>%
mutate(patho_names2 = str_replace(patho_names, " \\(and ", "|")) %>%
mutate(patho_names3 = str_replace(patho_names2, " \\(", "|")) %>%
mutate(patho_names4 = str_replace(patho_names3, "\\)", "")) %>%
mutate(patho_names5 = str_replace(patho_names4, " and ", " ")) %>%
mutate(patho_names6 = str_replace(patho_names5, "'s", "")) %>% .[-c(109:142),] %>%
select(patho_names6)
# tweets text
tw = twitterDF$clean_text
path_names = pathogen$patho_names6
# tweet date and states
dates = as.Date(twitterDF$created)
states = twitterDF$states
# create a matrix
mx = matrix(nrow = length(dates), ncol = length(pathogen$patho_names6), byrow = TRUE)
for( i in 1:length(tw)){
for( j in 1:length(path_names)){
if(score(tw[i], path_names[j]) >= 19){
mx[i, j] = path_names[j]
}
}
}
dimnames(mx) <- list(as.character(dates), path_names)
mx.df = data.frame(mx)
mx.df = cbind(mx.df, dates = as.character(dates), states = states)
mx.df = mx.df %>%
gather(pathogen_list, pathogen_reported, 1:146, na.rm = TRUE) %>%
select(dates, states, pathogen_reported) %>% arrange(desc(dates))
# adding coordinates to the df
states_names <- ggplot2::map_data("state")
# get avg of the coordinate for each state, since we want to draw a dot on them
states_av <- states_names %>% group_by(region) %>% summarise(avg_long = mean(long), avg_lat = mean(lat))
# change the format
states_av$region = str_to_title(states_av$region)
colnames(states_av)[1] = "states"
mx.df.cor = merge.data.frame(mx.df, states_av, by = "states")
return(mx.df)
}
mx = retrieve.twitter.term(tw_df, "Corn_diseases.lst")
head(mx)
return(mx.df.cor)
retrieve.twitter.term <- function(twitterDF, diseaseDB){
# load disease list and reformat
pathogen_df = read.delim(diseaseDB, header = FALSE, col.names = "common_names")
pathogen = pathogen_df %>%
mutate(patho_names = str_replace(common_names, " or ", "|")) %>%
mutate(patho_names2 = str_replace(patho_names, " \\(and ", "|")) %>%
mutate(patho_names3 = str_replace(patho_names2, " \\(", "|")) %>%
mutate(patho_names4 = str_replace(patho_names3, "\\)", "")) %>%
mutate(patho_names5 = str_replace(patho_names4, " and ", " ")) %>%
mutate(patho_names6 = str_replace(patho_names5, "'s", "")) %>% .[-c(109:142),] %>%
select(patho_names6)
# tweets text
tw = twitterDF$clean_text
path_names = pathogen$patho_names6
# tweet date and states
dates = as.Date(twitterDF$created)
states = twitterDF$states
# create a matrix
mx = matrix(nrow = length(dates), ncol = length(pathogen$patho_names6), byrow = TRUE)
for( i in 1:length(tw)){
for( j in 1:length(path_names)){
if(score(tw[i], path_names[j]) >= 19){
mx[i, j] = path_names[j]
}
}
}
dimnames(mx) <- list(as.character(dates), path_names)
mx.df = data.frame(mx)
mx.df = cbind(mx.df, dates = as.character(dates), states = states)
mx.df = mx.df %>%
gather(pathogen_list, pathogen_reported, 1:146, na.rm = TRUE) %>%
select(dates, states, pathogen_reported) %>% arrange(desc(dates))
# adding coordinates to the df
states_names <- ggplot2::map_data("state")
# get avg of the coordinate for each state, since we want to draw a dot on them
states_av <- states_names %>% group_by(region) %>% summarise(avg_long = mean(long), avg_lat = mean(lat))
# change the format
states_av$region = str_to_title(states_av$region)
colnames(states_av)[1] = "states"
mx.df.cor = merge.data.frame(mx.df, states_av, by = "states")
return(mx.df.cor)
}
mx = retrieve.twitter.term(tw_df, "Corn_diseases.lst")
head(mx)
retrieve.twitter.term <- function(twitterDF, diseaseDB){
# load disease list and reformat
pathogen_df = read.delim(diseaseDB, header = FALSE, col.names = "common_names")
pathogen = pathogen_df %>%
mutate(patho_names = str_replace(common_names, " or ", "|")) %>%
mutate(patho_names2 = str_replace(patho_names, " \\(and ", "|")) %>%
mutate(patho_names3 = str_replace(patho_names2, " \\(", "|")) %>%
mutate(patho_names4 = str_replace(patho_names3, "\\)", "")) %>%
mutate(patho_names5 = str_replace(patho_names4, " and ", " ")) %>%
mutate(patho_names6 = str_replace(patho_names5, "'s", "")) %>% .[-c(109:142),] %>%
select(patho_names6)
# tweets text
tw = twitterDF$clean_text
path_names = pathogen$patho_names6
# tweet date and states
dates = as.Date(twitterDF$created)
states = twitterDF$states
# create a matrix
mx = matrix(nrow = length(dates), ncol = length(pathogen$patho_names6), byrow = TRUE)
for( i in 1:length(tw)){
for( j in 1:length(path_names)){
if(score(tw[i], path_names[j]) >= 19){
mx[i, j] = path_names[j]
}
}
}
dimnames(mx) <- list(as.character(dates), path_names)
mx.df = data.frame(mx)
mx.df = cbind(mx.df, dates = as.character(dates), states = states)
mx.df = mx.df %>%
gather(pathogen_list, pathogen_reported, 1:146, na.rm = TRUE) %>%
select(dates, states, pathogen_reported) %>% arrange(desc(dates))
# adding coordinates to the df
states_names <- ggplot2::map_data("state")
# get avg of the coordinate for each state, since we want to draw a dot on them
states_av <- states_names %>% group_by(region) %>% summarise(avg_long = mean(long), avg_lat = mean(lat))
# change the format
states_av$region = str_to_title(states_av$region)
colnames(states_av)[1] = "states"
mx.df.cor = merge.data.frame(mx.df, states_av, by = "states")
mx.df.cor = mx.df.cor %>% arrange(desc(dates))
return(mx.df.cor)
}
mx = retrieve.twitter.term(tw_df, "Corn_diseases.lst")
head(mx)
head(mx)
mx.aggre = mx %>% group_by(dates, state) %>% summarise(path_count = count(pathogen_reported))
mx.aggre = mx %>% group_by(dates, states) %>% summarise(path_count = count(pathogen_reported))
mx.aggre = mx %>% group_by(dates, states) %>% summarise(path_count = n())
head(mx.aggre)
mx.aggre = mx %>% group_by(dates, states) %>% summarise(path_count = sum(pathogen_reported)
mx.aggre = mx %>% group_by(dates, states) %>% summarise(path_count = sum(pathogen_reported))
mx.aggre = mx %>% group_by(dates, states) %>% summarise(path_count = count(pathogen_reported))
mx.aggre = mx %>% group_by(dates, states) %>% arrange(desc(dates)) %>% tally()
head(mx.aggre)
mx.aggre = mx %>% group_by(dates, states) %>% tally() %>% arrange(desc(dates))
head(mx.aggre)
mx.aggre = mx %>% group_by(dates, states, pathogen_reported) %>% tally() %>% arrange(desc(dates))
head(mx.aggre)
mx.aggre = mx %>% group_by(dates, states, avg_long, avg_lat, pathogen_reported) %>% tally() %>% arrange(desc(dates))
head(mx.aggre)
setwd("/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/crop_alert/crop_shiny_app_R")
library(shiny)
?titlePanel
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
getwd()
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
download.file(url= "http://curl.haxx.se/ca/cacert.pem", destfile= "cacert.pem")
credentials <- OAuthFactory$new(consumerKey = consumer_key,
consumerSecret = consumer_secret,
requestURL = 'https://api.twitter.com/oauth/request_token',
accessURL = 'https://api.twitter.com/oauth/access_token',
authURL = 'https://api.twitter.com/oauth/authorize')
library(OAuthFactory)
library(OAuth)
library(ROAuth)
credentials <- OAuthFactory$new(consumerKey = consumer_key,
consumerSecret = consumer_secret,
requestURL = 'https://api.twitter.com/oauth/request_token',
accessURL = 'https://api.twitter.com/oauth/access_token',
authURL = 'https://api.twitter.com/oauth/authorize')
consumer_key =  '2d8fNhPCC14Ure7voMs6hcPqa'
consumer_secret = 'pNadFRYzMzY7mtZoSPziZW4IFZGOMqtklYQrlFGCax5Z49evL7'
credentials <- OAuthFactory$new(consumerKey = consumer_key,
consumerSecret = consumer_secret,
requestURL = 'https://api.twitter.com/oauth/request_token',
accessURL = 'https://api.twitter.com/oauth/access_token',
authURL = 'https://api.twitter.com/oauth/authorize')
credentials$handshake(cainfo="cacert.pem")
credentials <- OAuthFactory$new(consumerKey = consumer_key,
consumerSecret = consumer_secret,
requestURL = 'https://api.twitter.com/oauth/request_token',
accessURL = 'https://api.twitter.com/oauth/access_token',
authURL = 'https://api.twitter.com/oauth/authorize')
credentials$handshake(cainfo="cacert.pem")
install.packages("base64enc")
library("base64enc")
credentials <- OAuthFactory$new(consumerKey = consumer_key,
consumerSecret = consumer_secret,
requestURL = 'https://api.twitter.com/oauth/request_token',
accessURL = 'https://api.twitter.com/oauth/access_token',
authURL = 'https://api.twitter.com/oauth/authorize')
credentials$handshake(cainfo="cacert.pem")
install.packages("httk")
install.packages("httpuv")
install.packages("httpuv")
install.packages("httpuv")
library(httpuv)
library(httk)
credentials <- OAuthFactory$new(consumerKey = consumer_key,
consumerSecret = consumer_secret,
requestURL = 'https://api.twitter.com/oauth/request_token',
accessURL = 'https://api.twitter.com/oauth/access_token',
authURL = 'https://api.twitter.com/oauth/authorize')
library(ROAuth)
credentials <- OAuthFactory$new(consumerKey = consumer_key,
consumerSecret = consumer_secret,
requestURL = 'https://api.twitter.com/oauth/request_token',
accessURL = 'https://api.twitter.com/oauth/access_token',
authURL = 'https://api.twitter.com/oauth/authorize')
credentials$handshake(cainfo="cacert.pem")
library(ROAuth)
consumer_key =  '2d8fNhPCC14Ure7voMs6hcPqa'
consumer_secret = 'pNadFRYzMzY7mtZoSPziZW4IFZGOMqtklYQrlFGCax5Z49evL7'
download.file(url= "http://curl.haxx.se/ca/cacert.pem", destfile= "cacert.pem")
credentials <- OAuthFactory$new(consumerKey = consumer_key,
consumerSecret = consumer_secret,
requestURL = 'https://api.twitter.com/oauth/request_token',
accessURL = 'https://api.twitter.com/oauth/access_token',
authURL = 'https://api.twitter.com/oauth/authorize')
credentials$handshake(cainfo="cacert.pem")
consumer_secret = '9u347yoYAbfYBV5N0psqHbkyQFLbfOzrYrJWTrKQJQ4peZW0JR'
consumer_key =  '7A9lTiNXo97un1FdMgkMBSP8M'
consumer_secret = '9u347yoYAbfYBV5N0psqHbkyQFLbfOzrYrJWTrKQJQ4peZW0JR'
credentials <- OAuthFactory$new(consumerKey = consumer_key,
consumerSecret = consumer_secret,
requestURL = 'https://api.twitter.com/oauth/request_token',
accessURL = 'https://api.twitter.com/oauth/access_token',
authURL = 'https://api.twitter.com/oauth/authorize')
credentials$handshake(cainfo="cacert.pem")
library(base64enc)
library(httr)
install.packages("openssl")
library(openssl)
library(httpuv)
credentials <- OAuthFactory$new(consumerKey = consumer_key,
consumerSecret = consumer_secret,
requestURL = 'https://api.twitter.com/oauth/request_token',
accessURL = 'https://api.twitter.com/oauth/access_token',
authURL = 'https://api.twitter.com/oauth/authorize')
credentials$handshake(cainfo="cacert.pem")
credentials <- OAuthFactory$new(consumerKey = consumer_key,
consumerSecret = consumer_secret,
requestURL = 'https://api.twitter.com/oauth/request_token',
accessURL = 'https://api.twitter.com/oauth/access_token',
authURL = 'https://api.twitter.com/oauth/authorize')
credentials$handshake(cainfo="cacert.pem")
consumer_key =  '7A9lTiNXo97un1FdMgkMBSP8M'
consumer_secret = '9u347yoYAbfYBV5N0psqHbkyQFLbfOzrYrJWTrKQJQ4peZW0JR'
download.file(url= "http://curl.haxx.se/ca/cacert.pem", destfile= "cacert.pem")
credentials <- OAuthFactory$new(consumerKey = consumer_key,
consumerSecret = consumer_secret,
requestURL = 'https://api.twitter.com/oauth/request_token',
accessURL = 'https://api.twitter.com/oauth/access_token',
authURL = 'https://api.twitter.com/oauth/authorize')
credentials$handshake(cainfo="cacert.pem")
access_secret = 'TcZlXnBVz15ODHlNtVJOVn2MnWixVBBHkmQwE8EWn8OsT'
access_token = '977251715664642048-gIJ5XzI80SlTPvB34vpoNPhADLtLZ5C'
library(twitteR)
setup_twitter_oauth(consumer_key, consumer_secret, access_secret, access_token)
consumer_key =  '7A9lTiNXo97un1FdMgkMBSP8M'
consumer_secret = '9u347yoYAbfYBV5N0psqHbkyQFLbfOzrYrJWTrKQJQ4peZW0JR'
access_token = '977251715664642048-gIJ5XzI80SlTPvB34vpoNPhADLtLZ5C'
access_secret = 'TcZlXnBVz15ODHlNtVJOVn2MnWixVBBHkmQwE8EWn8OsT'
library(twitteR)
setup_twitter_oauth(consumer_key, consumer_secret, access_secret, access_token)
library(httr)
setup_twitter_oauth(consumer_key, consumer_secret, access_secret, access_token)
oauth_endpoint("twitter")
oauth_endpoints("twitter")
myapp <- oauth_app("twitter",
key = consumer_key,
secret = consumer_secret)
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
library(twitteR)
consumer_key =  '7A9lTiNXo97un1FdMgkMBSP8M'
consumer_secret = '9u347yoYAbfYBV5N0psqHbkyQFLbfOzrYrJWTrKQJQ4peZW0JR'
access_token = '977251715664642048-4nZqbxOt4YJjC7FH4wcMT5s0UqSKxsk'
access_secret = 'UwKGAdbRFEnzpQOjn5eReYzETN1T43h9WJ6L1wYuP8881'
setup_twitter_oauth(consumer_key, consumer_secret, access_secret, access_token)
library(twitteR)
consumer_key =  '7A9lTiNXo97un1FdMgkMBSP8M'
consumer_secret = '9u347yoYAbfYBV5N0psqHbkyQFLbfOzrYrJWTrKQJQ4peZW0JR'
access_token = '977251715664642048-4nZqbxOt4YJjC7FH4wcMT5s0UqSKxsk'
access_secret = 'UwKGAdbRFEnzpQOjn5eReYzETN1T43h9WJ6L1wYuP8881'
setup_twitter_oauth(consumer_key, consumer_secret, access_secret, access_token)
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
consumer_key =  '7A9lTiNXo97un1FdMgkMBSP8M'
consumer_secret = '9u347yoYAbfYBV5N0psqHbkyQFLbfOzrYrJWTrKQJQ4peZW0JR'
access_token = '977251715664642048-4nZqbxOt4YJjC7FH4wcMT5s0UqSKxsk'
access_secret = 'UwKGAdbRFEnzpQOjn5eReYzETN1T43h9WJ6L1wYuP8881'
library(twitteR)
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
cred <- OAuthFactory$new(consumer_key, consumer_secret,
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='https://api.twitter.com/oauth/access_token',
authURL='https://api.twitter.com/oauth/authorize')
library(ROAuth)
cred <- OAuthFactory$new(consumer_key, consumer_secret,
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='https://api.twitter.com/oauth/access_token',
authURL='https://api.twitter.com/oauth/authorize')
cred <- OAuthFactory$new(consumerKey = consumer_key,
consumerSecret = consumer_secret,
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='https://api.twitter.com/oauth/access_token',
authURL='https://api.twitter.com/oauth/authorize')
cred$handshake(cainfo = "cacert.pem")
library(twitteR)
library(ROAuth)
cred <- OAuthFactory$new(consumerKey = consumer_key,
consumerSecret = consumer_secret,
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='https://api.twitter.com/oauth/access_token',
authURL='https://api.twitter.com/oauth/authorize')
cred$handshake(cainfo = "cacert.pem")
cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
consumer_key =  '7A9lTiNXo97un1FdMgkMBSP8M'
consumer_secret = '9u347yoYAbfYBV5N0psqHbkyQFLbfOzrYrJWTrKQJQ4peZW0JR'
access_token = '977251715664642048-4nZqbxOt4YJjC7FH4wcMT5s0UqSKxsk'
access_secret = 'UwKGAdbRFEnzpQOjn5eReYzETN1T43h9WJ6L1wYuP8881'
library(twitteR)
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
cred <- OAuthFactory$new(consumerKey = consumer_key,
consumerSecret = consumer_secret,
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='https://api.twitter.com/oauth/access_token',
authURL='https://api.twitter.com/oauth/authorize')
library(ROAuth)
cred <- OAuthFactory$new(consumerKey = consumer_key,
consumerSecret = consumer_secret,
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='https://api.twitter.com/oauth/access_token',
authURL='https://api.twitter.com/oauth/authorize')
cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
token <- get("oauth_token", twitteR::oauth_cache)
cred$handshake()
download.file(url="http://curl.haxx.se/ca/cacert.pem",  destfile="cacert.pem")
cred <- OAuthFactory$new(consumerKey = consumer_key,
consumerSecret = consumer_secret,
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='https://api.twitter.com/oauth/access_token',
authURL='https://api.twitter.com/oauth/authorize')
cred$handshake(cainfo = "cacert.pem")
rm(list = ls())
library(ROAuth)
library(RCurl)
library(twitteR)
consumer_key =  '7A9lTiNXo97un1FdMgkMBSP8M'
consumer_secret = '9u347yoYAbfYBV5N0psqHbkyQFLbfOzrYrJWTrKQJQ4peZW0JR'
access_token = '977251715664642048-4nZqbxOt4YJjC7FH4wcMT5s0UqSKxsk'
access_secret = 'UwKGAdbRFEnzpQOjn5eReYzETN1T43h9WJ6L1wYuP8881'
cred <- OAuthFactory$new(consumerKey = consumer_key,
consumerSecret = consumer_secret,
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='https://api.twitter.com/oauth/access_token',
authURL='https://api.twitter.com/oauth/authorize')
h <- getCurlHandle(
proxy = "proxy1.domain.com",
proxyusername = "username",
proxypassword = "pwd",
proxyport = "8080", cainfo = "cacert.pem"
)
cred <- OAuthFactory$new(consumerKey = consumer_key,
consumerSecret = consumer_secret,
requestURL='http://api.twitter.com/oauth/request_token',
accessURL='http://api.twitter.com/oauth/access_token',
authURL='http://api.twitter.com/oauth/authorize')
cred$handshake(cainfo = "cacert.pem")
cred <- OAuthFactory$new(consumerKey = consumer_key,
consumerSecret = consumer_secret,
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='https://api.twitter.com/oauth/access_token',
authURL='https://api.twitter.com/oauth/authorize')
cred$handshake(cainfo = "cacert.pem")
library(shiny); runApp('crop_alert.app.R')
runApp('crop_alert.app.R')
ggplot2::map_data('state')
