}
checkFasta <- function(fa){
fasta = readLines(fa)
# 1 nothing input
if(length(fasta) == 0){
return(FALSE)
}
if(startsWith(fasta[1], ">")){
comp = unique(unlist(strsplit(paste(fasta[2:length(fasta)], collapse = ""), "")))
all_symbols = c("A", "T", "C", "G", "N")
if(sum(comp %in% all_symbols) != length(comp)){
return(FALSE)
}
}
if(startsWith(fasta[1], ">") == F){
comp = unique(unlist(strsplit(paste(fasta, collapse = ""), "")))
all_symbols = c("A", "T", "C", "G", "N")
if(sum(comp %in% all_symbols) != length(comp)){
return(FALSE)
} else {
return(NULL)
}
}
return(NULL)
}
outputLabel("test4.fa")
outputLabel("test5.fa")
outputLabel("test3.fa")
outputLabel("test2.fa")
outputLabel("test1.fa")
checkFasta("test1.fa")
checkFasta("test2.fa")
checkFasta("test3.fa")
checkFasta("test4.fa")
checkFasta("test5.fa")
outputLabel <- function(fa){
print(checkFasta(fa))
if(checkFasta(fa) == FALSE){
"Please input valid fasta format"
} else{
NULL
}
}
checkFasta("test1.fa")
outputLabel("test1.fa")
outputLabel <- function(fa){
print(checkFasta(fa))
if(checkFasta(fa) == FALSE){
"Please input valid fasta format"
} else{
return(NULL)
}
}
outputLabel("test1.fa")
outputLabel <- function(fa){
if(checkFasta(fa) == FALSE){
"Please input valid fasta format"
}
}
outputLabel("test1.fa")
outputLabel <- function(fa){
if(is.null(checkFasta(fa))){
return(NULL)
}
if(checkFasta(fa) == FALSE){
"Please input valid fasta format"
}
}
outputLabel("test1.fa")
outputLabel("test2.fa")
outputLabel("test3.fa")
outputLabel("test4.fa")
outputLabel("test5.fa")
?get
?base::get
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
outputEval <- function(fa){
if(is.null(checkFasta(fa))){
NULL
}
if(checkFasta(fa) == FALSE){
"Please input valid fasta format"
}
}
checkFasta <- function(fa){
fasta = readLines(fa)
# 1 nothing input
if(length(fasta) == 0){
return(FALSE)
}
if(startsWith(fasta[1], ">")){
comp = unique(unlist(strsplit(paste(fasta[2:length(fasta)], collapse = ""), "")))
all_symbols = c("A", "T", "C", "G", "N")
if(sum(comp %in% all_symbols) != length(comp)){
return(FALSE)
}
}
if(startsWith(fasta[1], ">") == F){
comp = unique(unlist(strsplit(paste(fasta, collapse = ""), "")))
all_symbols = c("A", "T", "C", "G", "N")
if(sum(comp %in% all_symbols) != length(comp)){
return(FALSE)
} else {
return(NULL)
}
}
return(NULL)
}
checkFasta("test1.fa")
checkFasta("test2.fa")
checkFasta("test3.fa")
checkFasta("test4.fa")
outputEval <- function(fa){
if(checkFasta(fa) == "NO INPUT"){
FALSE
}
if(is.null(checkFasta(fa))){
NULL
}
if(checkFasta(fa) == FALSE){
"Please input valid fasta format"
}
}
checkFasta <- function(fa){
fasta = readLines(fa)
if(length(fasta) == 0){
return("NO INPUT")
}
if(startsWith(fasta[1], ">")){
comp = unique(unlist(strsplit(paste(fasta[2:length(fasta)], collapse = ""), "")))
all_symbols = c("A", "T", "C", "G", "N")
if(sum(comp %in% all_symbols) != length(comp)){
return(FALSE)
}
}
if(startsWith(fasta[1], ">") == F){
comp = unique(unlist(strsplit(paste(fasta, collapse = ""), "")))
all_symbols = c("A", "T", "C", "G", "N")
if(sum(comp %in% all_symbols) != length(comp)){
return(FALSE)
} else {
return(NULL)
}
}
return(NULL)
}
outputLabel("test1.fa")
outputLabel("test2.fa")
outputLabel("test3.fa")
outputLabel("test4.fa")
outputLabel("test5.fa")
View(outputLabel)
View(outputEval)
runApp('Local_Blast_App.R')
outputEval <- function(fa){
if(checkFasta(fa) == "NO INPUT"){
FALSE
}
if(is.null(checkFasta(fa))){
NULL
}
if(checkFasta(fa) == FALSE){
"Please input valid fasta format"
}
}
checkFasta <- function(fa){
fasta = readLines(fa)
if(length(fasta) == 0){
return("NO INPUT")
}
if(startsWith(fasta[1], ">")){
comp = unique(unlist(strsplit(paste(fasta[2:length(fasta)], collapse = ""), "")))
all_symbols = c("A", "T", "C", "G", "N")
if(sum(comp %in% all_symbols) != length(comp)){
return(FALSE)
}
}
if(startsWith(fasta[1], ">") == F){
comp = unique(unlist(strsplit(paste(fasta, collapse = ""), "")))
all_symbols = c("A", "T", "C", "G", "N")
if(sum(comp %in% all_symbols) != length(comp)){
return(FALSE)
} else {
return(NULL)
}
}
return(NULL)
}
outputLabel("test1.fa")
outputLabel("test2.fa")
outputLabel("test3.fa")
outputLabel("test4.fa")
outputLabel("test5.fa")
outputEval("test1.fa")
outputEvall("test2.fa")
outputEval("test3.fa")
outputEval("test4.fa")
outputEval("test5.fa")
checkFasta("test2.fa")
outputEval <- function(fa){
if(checkFasta(fa) == "NOINPUT"){
return(FALSE)
}
if(is.null(checkFasta(fa))){
return(NULL)
}
if(checkFasta(fa) == FALSE){
return("Please input valid fasta format")
}
}
checkFasta <- function(fa){
fasta = readLines(fa)
if(length(fasta) == 0){
return("NOINPUT")
}
if(startsWith(fasta[1], ">")){
comp = unique(unlist(strsplit(paste(fasta[2:length(fasta)], collapse = ""), "")))
all_symbols = c("A", "T", "C", "G", "N")
if(sum(comp %in% all_symbols) != length(comp)){
return(FALSE)
}
}
if(startsWith(fasta[1], ">") == F){
comp = unique(unlist(strsplit(paste(fasta, collapse = ""), "")))
all_symbols = c("A", "T", "C", "G", "N")
if(sum(comp %in% all_symbols) != length(comp)){
return(FALSE)
} else {
return(NULL)
}
}
return(NULL)
}
outputEval("test1.fa")
outputEval <- function(fa){
fasta = readLines(fa)
if(checkFasta(fa) == "NOINPUT"){
return(FALSE)
} else if(is.null(checkFasta(fa))){
return(NULL)
} else if(checkFasta(fa) == FALSE){
return("Please input valid fasta format")
}
}
checkFasta <- function(fasta){
if(length(fasta) == 0){
return("NOINPUT")
}
if(startsWith(fasta[1], ">")){
comp = unique(unlist(strsplit(paste(fasta[2:length(fasta)], collapse = ""), "")))
all_symbols = c("A", "T", "C", "G", "N")
if(sum(comp %in% all_symbols) != length(comp)){
return(FALSE)
}
}
if(startsWith(fasta[1], ">") == F){
comp = unique(unlist(strsplit(paste(fasta, collapse = ""), "")))
all_symbols = c("A", "T", "C", "G", "N")
if(sum(comp %in% all_symbols) != length(comp)){
return(FALSE)
} else {
return(NULL)
}
}
return(NULL)
}
outputEval("test1.fa")
outputEvall("test2.fa")
outputEval("test3.fa")
outputEval("test4.fa")
outputEval("test2.fa")
outputEval <- function(fa){
fasta = readLines(fa)
if(checkFasta(fa) == "NOINPUT"){
return(FALSE)
}
if(is.null(checkFasta(fa))){
return(NULL)
}
if(checkFasta(fa) == FALSE){
return("Please input valid fasta format")
}
}
checkFasta <- function(fasta){
if(length(fasta) == 0){
return("NOINPUT")
}
if(startsWith(fasta[1], ">")){
comp = unique(unlist(strsplit(paste(fasta[2:length(fasta)], collapse = ""), "")))
all_symbols = c("A", "T", "C", "G", "N")
if(sum(comp %in% all_symbols) != length(comp)){
return(FALSE)
}
}
if(startsWith(fasta[1], ">") == F){
comp = unique(unlist(strsplit(paste(fasta, collapse = ""), "")))
all_symbols = c("A", "T", "C", "G", "N")
if(sum(comp %in% all_symbols) != length(comp)){
return(FALSE)
} else {
return(NULL)
}
}
return(NULL)
}
outputEval("test1.fa")
outputEval("test2.fa")
outputEval("test3.fa")
outputEval("test4.fa")
outputEval("test5.fa")
outputEval <- function(fa){
fasta = readLines(fa)
if(checkFasta(fasta) == "NOINPUT"){
return(FALSE)
}
if(is.null(checkFasta(fasta))){
return(NULL)
}
if(checkFasta(fasta) == FALSE){
return("Please input valid fasta format")
}
}
checkFasta <- function(fasta){
if(length(fasta) == 0){
return("NOINPUT")
}
if(startsWith(fasta[1], ">")){
comp = unique(unlist(strsplit(paste(fasta[2:length(fasta)], collapse = ""), "")))
all_symbols = c("A", "T", "C", "G", "N")
if(sum(comp %in% all_symbols) != length(comp)){
return(FALSE)
}
}
if(startsWith(fasta[1], ">") == F){
comp = unique(unlist(strsplit(paste(fasta, collapse = ""), "")))
all_symbols = c("A", "T", "C", "G", "N")
if(sum(comp %in% all_symbols) != length(comp)){
return(FALSE)
} else {
return(NULL)
}
}
return(NULL)
}
outputEval("test1.fa")
outputEval("test2.fa")
outputEval("test3.fa")
outputEval("test4.fa")
outputEval("test5.fa")
outputEval <- function(fa){
fasta = readLines(fa)
if(checkFasta(fasta) == "NOINPUT"){
return(FALSE)
}
if(is.null(checkFasta(fasta))){
return(NULL)
}
if(checkFasta(fasta) == FALSE){
return("Please input valid fasta format")
}
return(NULL)
}
checkFasta <- function(fasta){
if(length(fasta) == 0){
return("NOINPUT")
}
if(startsWith(fasta[1], ">")){
comp = unique(unlist(strsplit(paste(fasta[2:length(fasta)], collapse = ""), "")))
all_symbols = c("A", "T", "C", "G", "N")
if(sum(comp %in% all_symbols) != length(comp)){
return(FALSE)
}
}
if(startsWith(fasta[1], ">") == F){
comp = unique(unlist(strsplit(paste(fasta, collapse = ""), "")))
all_symbols = c("A", "T", "C", "G", "N")
if(sum(comp %in% all_symbols) != length(comp)){
return(FALSE)
} else {
return(NULL)
}
}
return(NULL)
}
outputEval("test1.fa")
outputEval("test2.fa")
outputEval("test3.fa")
outputEval("test4.fa")
outputEval("test5.fa")
outputEval <- function(fa){
fasta = readLines(fa)
print(fasta)
if(checkFasta(fasta) == "NOINPUT"){
return(FALSE)
}
if(is.null(checkFasta(fasta))){
return(NULL)
}
if(checkFasta(fasta) == FALSE){
return("Please input valid fasta format")
}
return(NULL)
}
outputEval("test1.fa")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
outputEval <- function(fa){
fasta = readLines(fa)
print(str(fasta))
if(checkFasta(fasta) == "NOINPUT"){
return(FALSE)
}
if(is.null(checkFasta(fasta))){
return(NULL)
}
if(checkFasta(fasta) == FALSE){
return("Please input valid fasta format")
}
return(NULL)
}
outputEval("test1.fa")
outputEval <- function(fa){
fasta = readLines(fa)
print(paste("check results:", checkFasta(fasta)))
if(checkFasta(fasta) == "NOINPUT"){
return(FALSE)
}
if(is.null(checkFasta(fasta))){
return(NULL)
}
if(checkFasta(fasta) == FALSE){
return("Please input valid fasta format")
}
return(NULL)
}
outputEval("test1.fa")
outputEval <- function(fa){
fasta = readLines(fa)
print(paste("check results:", checkFasta(fasta)))
if(length(checkFasta(fasta)) == 0){
return(NULL)
}
if(checkFasta(fasta) == "NOINPUT"){
return(FALSE)
}
if(checkFasta(fasta) == FALSE){
return("Please input valid fasta format")
}
}
outputEval("test1.fa")
outputEval("test2.fa")
outputEval("test3.fa")
outputEval("test4.fa")
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('Local_Blast_App.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
runApp('/media/swaggyp1985/HDD4T/OSU_Projects[2017-2018]/shiny_apps/testValidate.R')
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
